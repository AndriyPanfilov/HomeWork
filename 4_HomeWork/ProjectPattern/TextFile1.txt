Завдання:

1.
	Створити бібліотеку для логування, у якій можливо буде динамічно змінювати "синк" (місце введення логу).
	Інтерфейс LogSink:
		struct LogSink {
			virtual void write (const std:: string& msg)=0;
			virtual ~LogSink() = default;
		};

	1.1 «синки»
	 - ConsoleSink → виводить у std::cout;
	 - FileSink    → додає рядок до файлу "app.log";
	 - NullSink    → нічого не робить;

	1.2 - enum 
	- enum class SinkType{
		CONSOLE;
		FILE;
		NONE
	};

	1.3 - Сінглтон Logger:
	class Logger {
		public:
			 static Logger& instance();
			void set_sink(SinkType type); //Метод set_sink() у логері - це фабричний метод, який встановлює приватний філд sink_
											//у той тип синку, який вибрав користувач у set_sink().
											//Звичайно, користувач може викликати set_sink() декілька разів,
											//один за одним, і синк має бути встановлено коректно кожний раз.
			void log(const std::string& msg);
		private:
			std::unique_ptr<LogSink> sink_;
			  // заборонити стороннє створення обєкту
			 // заборонити копіювання/присвоєння
};

2. Демонстрація в main()
2.1 Запросити у користувача тип сінку через аргумент командної строки (НЕ через std::cin) (console, file, none).
	По дефолту (якщо користувач не дає ніяких аргументів у командну строку) можете робити вивід у консоль
	(щоб можна було побачити результат).
Викликати Logger::instance().set_sink(...).
Викликати кілька Logger::instance().log("Test message").
Впевнитися, що повідомлення в консолі, у файлі чи відсутнє.